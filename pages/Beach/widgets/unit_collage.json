{
  "backgroundColor": "#FFFFFF",
  "borderColor": "white",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 303,
  "boxShadow": "none",
  "defaultModel": "{{{data: beach_func.unitCollageData}}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "hu7n5emnzk",
  "leftColumn": 5,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 191,
  "mobileLeftColumn": 5,
  "mobileRightColumn": 28,
  "mobileTopRow": 161,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 300,
  "originalTopRow": 137,
  "parentColumnSpace": 19.8125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 59,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap\");\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  background-color: white;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 0.8fr 2.2fr; /* 1/3 for widget, 2/3 for gallery */\n  margin: auto; /* Center the container */\n  width: 100%;\n}\n\n.data-container {\n  display: flex; /* Use flexbox to align widget and gallery side by side */\n  padding-bottom: 40px; /*  Space between each data container */\n}\n\n.widget-container {\n  flex: 1; /* Takes the remaining space for the widget */\n}\n\n.widget {\n  background-color: #ddd;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start; /* Align items at the top */\n  align-items: flex-start; /* Align items to the left */\n  height: 100%; /* Match the height of the container */\n  font-family: \"Inter\", \"Inter var\", sans-serif;\n  text-color: #231F20;\n  background-color: white;\n}\n\n.widget h3 {\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.widget p {\n  font-size: 15px;\n  margin-bottom: 10px;\n}\n\n/* Gallery section */\n.gallery-container {\n  flex: 2; /* Takes twice the space of the widget */\n  width: 100%;\n  height: 100%; /* Match the height of the container */\n  display: grid; /* Grid layout for galleries */\n  /* gap: 10px; Space between gallery groups */\n}\n\n/* General gallery styles */\n.gallery {\n  display: grid;\n  gap: 0; /* No gap between items */\n  width: 100%;\n  height: 500px; /* Retain the fixed gallery height */\n}\n\n/* Three-image gallery */\n.gallery.three-image {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  gap: 0; /* No gap between items */\n}\n\n.gallery-item {\n  position: relative;\n  overflow: hidden;\n  height: 100%; /* Ensure the gallery item fills the block */\n}\n\n.gallery-item img {\n  width: 100%;\n  height: 100%; /* Ensure image fills its container */\n  object-fit: cover; /* Ensures image fills its container */\n  border: white solid 3px;\n}\n\n.gallery-item.large {\n  grid-column: span 2; /* Takes 2 columns */\n  grid-row: span 2; /* Takes 2 rows */\n}\n\n.gallery-item.small {\n  grid-column: span 1; /* Takes 1 column */\n  grid-row: span 1; /* Takes 1 row */\n}\n\n/* Two-image gallery */\n.gallery.two-image {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: 1fr;\n  gap: 0; /* No gap between items */\n}\n\n/* One-image gallery */\n.gallery.one-image {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n}\n\n/* Media queries for responsive design */\n@media screen and (max-width: 768px) {\n  .gallery.three-image,\n  .gallery.two-image {\n    grid-template-columns: 1fr; /* Stack columns on small screens */\n    grid-template-rows: repeat(3, 1fr); /* Maintain height distribution */\n  }\n  .gallery-item.large,\n  .gallery-item.small {\n    grid-column: span 1;\n    grid-row: span 1; /* Ensure each item takes one grid cell */\n  }\n}",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>Gallery with Widget</title>\n  </head>\n  <body>\n    <div id=\"root-container\"></div>\n    <!-- Main container for all data -->\n\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n",
    "js": "appsmith.onReady(() => {\n  const rootContainer = document.getElementById(\"root-container\");\n\n  // Function to create galleries and widgets\n  function processData(DATA) {\n    function createDynamicGallery(imageDivs) {\n      const fragment = document.createDocumentFragment();\n      function createGalleryBlock(type, divs) {\n        const gallery = document.createElement(\"div\");\n        gallery.className = `gallery ${type}`;\n        gallery.innerHTML = divs.join(\"\");\n        return gallery;\n      }\n      function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n      let threeImageGalleryUsed = false;\n      let twoImageGalleryCount = 0;\n      let lastGalleryType = null;\n      let currentIndex = 0;\n      while (currentIndex < imageDivs.length) {\n        let availableOptions = [];\n        if (imageDivs.length - currentIndex >= 3 && !threeImageGalleryUsed) availableOptions.push(\"three-image\");\n        if (imageDivs.length - currentIndex >= 2 && twoImageGalleryCount < 2) availableOptions.push(\"two-image\");\n        if (imageDivs.length - currentIndex >= 1) availableOptions.push(\"one-image\");\n        availableOptions = availableOptions.filter(option => option !== lastGalleryType);\n        if (availableOptions.length === 0) {\n          break;\n        }\n        const randomChoice = availableOptions[getRandomInt(0, availableOptions.length - 1)];\n        if (randomChoice === \"three-image\") {\n          const threeImageDivs = ['<div class=\"gallery-item large\">' + imageDivs[currentIndex].slice(imageDivs[currentIndex].indexOf(\"<img\")) + \"</div>\", '<div class=\"gallery-item small\">' + imageDivs[currentIndex + 1].slice(imageDivs[currentIndex + 1].indexOf(\"<img\")) + \"</div>\", '<div class=\"gallery-item small\">' + imageDivs[currentIndex + 2].slice(imageDivs[currentIndex + 2].indexOf(\"<img\")) + \"</div>\"];\n          fragment.appendChild(createGalleryBlock(\"three-image\", threeImageDivs));\n          currentIndex += 3;\n          threeImageGalleryUsed = true;\n          lastGalleryType = \"three-image\";\n        } else if (randomChoice === \"two-image\") {\n          const twoImageDivs = [imageDivs[currentIndex], imageDivs[currentIndex + 1]];\n          fragment.appendChild(createGalleryBlock(\"two-image\", twoImageDivs));\n          currentIndex += 2;\n          twoImageGalleryCount++;\n          lastGalleryType = \"two-image\";\n        } else if (randomChoice === \"one-image\") {\n          const oneImageDiv = [imageDivs[currentIndex]];\n          fragment.appendChild(createGalleryBlock(\"one-image\", oneImageDiv));\n          currentIndex += 1;\n          lastGalleryType = \"one-image\";\n        }\n      }\n      return fragment;\n    }\n    DATA.forEach(item => {\n      // Create a new container for each index of DATA\n      const container = document.createElement(\"div\");\n      container.className = \"data-container\";\n\n      // Create a separate container for the widget\n      const widgetContainer = document.createElement(\"div\");\n      widgetContainer.className = \"widget-container\";\n\n      // Populate the widget section\n      const widget = document.createElement(\"div\");\n      widget.className = \"widget\";\n      widget.innerHTML = `<h2>${item.name}</h2><div>${item.rate}</div><p>${item.description}</p>`;\n\n      // Append the widget to its separate container\n      widgetContainer.appendChild(widget);\n\n      // Create a separate container for galleries\n      const galleryContainer = document.createElement(\"div\");\n      galleryContainer.className = \"gallery-container\";\n\n      // Create the gallery\n      const gallery = createDynamicGallery(item.imageDivs);\n\n      // Append the gallery to its separate container\n      galleryContainer.appendChild(gallery);\n\n      // Append the widget and gallery containers to the main container\n      container.appendChild(widgetContainer);\n      container.appendChild(galleryContainer);\n\n      // Append the main container to the root container\n      rootContainer.appendChild(container);\n    });\n  }\n\n  // Function to check if DATA is available and not empty\n  function checkDataAvailability() {\n    const DATA = appsmith.model.data;\n    if (DATA && DATA.length > 0) {\n      console.log(\"Data is available, processing now...\");\n      processData(DATA); // Process the data\n      clearInterval(dataCheckInterval); // Stop checking once DATA is available\n    } else {\n      console.log(\"Waiting for data...\");\n    }\n  }\n\n  // Set an interval to periodically check if DATA is available\n  const dataCheckInterval = setInterval(checkDataAvailability, 2000); // Check every second\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 140,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  background-color: white;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 0.8fr 2.2fr; /* 1/3 for widget, 2/3 for gallery */\n  margin: auto; /* Center the container */\n  width: 100%;\n}\n\n.data-container {\n  display: flex; /* Use flexbox to align widget and gallery side by side */\n  padding-bottom: 40px;/*  Space between each data container */\n\t\n}\n\n.widget-container {\n  flex: 1; /* Takes the remaining space for the widget */\n}\n\n.widget {\n  background-color: #ddd;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start; /* Align items at the top */\n  align-items: flex-start; /* Align items to the left */\n  height: 100%; /* Match the height of the container */\n\tfont-family: 'Inter', 'Inter var', sans-serif;\n\ttext-color: #231F20;\n\tbackground-color: white;\n}\n\n.widget h3 {\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.widget p {\n  font-size: 15px;\n\tmargin-bottom: 10px\n}\n\n/* Gallery section */\n.gallery-container {\n  flex: 2; /* Takes twice the space of the widget */\n  width: 100%;\n  height: 100%; /* Match the height of the container */\n  display: grid; /* Grid layout for galleries */\n  /* gap: 10px; Space between gallery groups */\n}\n\n/* General gallery styles */\n.gallery {\n  display: grid;\n  gap: 0; /* No gap between items */\n  width: 100%;\n  height: 500px; /* Retain the fixed gallery height */\n}\n\n/* Three-image gallery */\n.gallery.three-image {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  gap: 0; /* No gap between items */\n}\n\n.gallery-item {\n  position: relative;\n  overflow: hidden;\n  height: 100%; /* Ensure the gallery item fills the block */\n}\n\n.gallery-item img {\n  width: 100%;\n  height: 100%; /* Ensure image fills its container */\n  object-fit: cover; /* Ensures image fills its container */\n  border: white solid 3px;\n}\n\n.gallery-item.large {\n  grid-column: span 2; /* Takes 2 columns */\n  grid-row: span 2; /* Takes 2 rows */\n}\n\n.gallery-item.small {\n  grid-column: span 1; /* Takes 1 column */\n  grid-row: span 1; /* Takes 1 row */\n}\n\n/* Two-image gallery */\n.gallery.two-image {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: 1fr;\n  gap: 0; /* No gap between items */\n}\n\n/* One-image gallery */\n.gallery.one-image {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr;\n}\n\n/* Media queries for responsive design */\n@media screen and (max-width: 768px) {\n  .gallery.three-image,\n  .gallery.two-image {\n    grid-template-columns: 1fr; /* Stack columns on small screens */\n    grid-template-rows: repeat(3, 1fr); /* Maintain height distribution */\n  }\n\n  .gallery-item.large,\n  .gallery-item.small {\n    grid-column: span 1;\n    grid-row: span 1; /* Ensure each item takes one grid cell */\n  }\n}\n",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <title>Gallery with Widget</title>\n  </head>\n  <body>\n    <div id=\"root-container\"></div>\n    <!-- Main container for all data -->\n\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n",
    "js": "appsmith.onReady(() => {\n  const rootContainer = document.getElementById(\"root-container\");\n\n  // Function to create galleries and widgets\n  function processData(DATA) {\n    function createDynamicGallery(imageDivs) {\n      const fragment = document.createDocumentFragment();\n\n      function createGalleryBlock(type, divs) {\n        const gallery = document.createElement(\"div\");\n        gallery.className = `gallery ${type}`;\n        gallery.innerHTML = divs.join(\"\");\n        return gallery;\n      }\n\n      function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n\n      let threeImageGalleryUsed = false;\n      let twoImageGalleryCount = 0;\n      let lastGalleryType = null;\n      let currentIndex = 0;\n\n      while (currentIndex < imageDivs.length) {\n        let availableOptions = [];\n\n        if (imageDivs.length - currentIndex >= 3 && !threeImageGalleryUsed)\n          availableOptions.push(\"three-image\");\n        if (imageDivs.length - currentIndex >= 2 && twoImageGalleryCount < 2)\n          availableOptions.push(\"two-image\");\n        if (imageDivs.length - currentIndex >= 1)\n          availableOptions.push(\"one-image\");\n\n        availableOptions = availableOptions.filter(\n          (option) => option !== lastGalleryType\n        );\n\n        if (availableOptions.length === 0) {\n          break;\n        }\n\n        const randomChoice =\n          availableOptions[getRandomInt(0, availableOptions.length - 1)];\n\n        if (randomChoice === \"three-image\") {\n          const threeImageDivs = [\n            '<div class=\"gallery-item large\">' +\n              imageDivs[currentIndex].slice(\n                imageDivs[currentIndex].indexOf(\"<img\")\n              ) +\n              \"</div>\",\n            '<div class=\"gallery-item small\">' +\n              imageDivs[currentIndex + 1].slice(\n                imageDivs[currentIndex + 1].indexOf(\"<img\")\n              ) +\n              \"</div>\",\n            '<div class=\"gallery-item small\">' +\n              imageDivs[currentIndex + 2].slice(\n                imageDivs[currentIndex + 2].indexOf(\"<img\")\n              ) +\n              \"</div>\",\n          ];\n          fragment.appendChild(\n            createGalleryBlock(\"three-image\", threeImageDivs)\n          );\n          currentIndex += 3;\n          threeImageGalleryUsed = true;\n          lastGalleryType = \"three-image\";\n        } else if (randomChoice === \"two-image\") {\n          const twoImageDivs = [\n            imageDivs[currentIndex],\n            imageDivs[currentIndex + 1],\n          ];\n          fragment.appendChild(createGalleryBlock(\"two-image\", twoImageDivs));\n          currentIndex += 2;\n          twoImageGalleryCount++;\n          lastGalleryType = \"two-image\";\n        } else if (randomChoice === \"one-image\") {\n          const oneImageDiv = [imageDivs[currentIndex]];\n          fragment.appendChild(createGalleryBlock(\"one-image\", oneImageDiv));\n          currentIndex += 1;\n          lastGalleryType = \"one-image\";\n        }\n      }\n\n      return fragment;\n    }\n\n    DATA.forEach((item) => {\n      // Create a new container for each index of DATA\n      const container = document.createElement(\"div\");\n      container.className = \"data-container\";\n\n      // Create a separate container for the widget\n      const widgetContainer = document.createElement(\"div\");\n      widgetContainer.className = \"widget-container\";\n\n      // Populate the widget section\n      const widget = document.createElement(\"div\");\n      widget.className = \"widget\";\n      widget.innerHTML = `<h2>${item.name}</h2><div>${item.rate}</div><p>${item.description}</p>`;\n\n      // Append the widget to its separate container\n      widgetContainer.appendChild(widget);\n\n      // Create a separate container for galleries\n      const galleryContainer = document.createElement(\"div\");\n      galleryContainer.className = \"gallery-container\";\n\n      // Create the gallery\n      const gallery = createDynamicGallery(item.imageDivs);\n\n      // Append the gallery to its separate container\n      galleryContainer.appendChild(gallery);\n\n      // Append the widget and gallery containers to the main container\n      container.appendChild(widgetContainer);\n      container.appendChild(galleryContainer);\n\n      // Append the main container to the root container\n      rootContainer.appendChild(container);\n    });\n  }\n\n  // Function to check if DATA is available and not empty\n  function checkDataAvailability() {\n    const DATA = appsmith.model.data;\n\n    if (DATA && DATA.length > 0) {\n      console.log(\"Data is available, processing now...\");\n      processData(DATA); // Process the data\n      clearInterval(dataCheckInterval); // Stop checking once DATA is available\n    } else {\n      console.log(\"Waiting for data...\");\n    }\n  }\n\n  // Set an interval to periodically check if DATA is available\n  const dataCheckInterval = setInterval(checkDataAvailability, 2000); // Check every second\n});\n"
  },
  "version": 1,
  "widgetId": "9pbfoe9fga",
  "widgetName": "unit_collage"
}